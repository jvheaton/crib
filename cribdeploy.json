{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            },
            "defaultValue": "[utcNow()]"
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "gastori",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword0123",
            "minLength": 12,
            "metadata": {
                "description": "Password for the all Virtual machines. The password must be at least 12 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "adfsUsername": {
            "type": "string",
            "defaultValue": "gastori",
            "metadata": {
                "description": "ADFS user account name"
            }
        },
        "adfsPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword0123",
            "minLength": 12,
            "metadata": {
                "description": "Password for ADFS user account. The password must be at least 12 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "domainUsers": {
            "type": "secureObject",
            "metadata": {
                "description": "Domain users to create after domain is set up."
            },
            "defaultValue": {
                "array": [
                    {"FirstName":"Norah","LastName":"Martha","SamAccountName":"nmartha","Department":"Human Resources","JobTitle":"HR Director","Password":"S@l@m3!123","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Pedro","LastName":"Gustavo","SamAccountName":"pgustavo","Department":"IT Support","JobTitle":"CIO","Password":"W1n1!2019","Identity":"Domain Admins","UserContainer":"DomainUsers"},
                    {"FirstName":"Lucho","LastName":"Rodriguez","SamAccountName":"lrodriguez","Department":"Accounting","JobTitle":"VP","Password":"T0d@y!2019","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Stevie","LastName":"Beavers","SamAccountName":"sbeavers","Department":"Sales","JobTitle":"Agent","Password":"B1gM@c!2020","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Sysmon","LastName":"MS","SamAccountName":"sysmonsvc","Department":"IT Support","JobTitle":"Service Account","Password":"Buggy!1122","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Nxlog","LastName":"Shipper","SamAccountName":"nxlogsvc","Department":"IT Support","JobTitle":"Service Account","Password":"S3nData!1122","Identity":"Users","UserContainer":"DomainUsers"}
                ]
            }
        },
        "remoteAccessMode": {
            "type": "string",
            "metadata": {
                "description": "Do you want to restrict access to your environment by a Public IP or set up an Azure Bastion Host. If the former, make sure you add your public IP address to the variable 'allowedIPAddresses'"
            },
            "defaultValue": "AllowPublicIP",
            "allowedValues": [
                "AllowPublicIP",
                "AzureBastionHost"
            ]
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "btazureBastionHostName": {
            "type": "string",
            "metadata": {
                "description": "Name of Azure Bastion Host assigned to the Virtual network in this template"
            },
            "defaultValue": "AzureBastionHost"
        },
        "btazureBastionSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the Azure Bastion service"
            },
            "defaultValue": "192.168.3.0/27"
        },
        "rtazureBastionHostName": {
            "type": "string",
            "metadata": {
                "description": "Name of Azure Bastion Host assigned to the Virtual network in this template"
            },
            "defaultValue": "AzureBastionHost"
        },
        "rtazureBastionSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the Azure Bastion service"
            },
            "defaultValue": "192.169.3.0/27"
        },
        "domainFQDN": {
            "type": "string",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            },
            "defaultValue": "gastoricyber.local"
        },
        "numberOfWorkstations": {
            "type": "int",
            "minValue": 1,
            "maxValue": 100,
            "metadata": {
                "description": "Number of VMs to deploy"
            },
            "defaultValue": 1
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the name of your virtual machine. Template will add a number starting from 5."
            },
            "defaultValue": "vmWKS"
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h2-pro",
            "allowedValues": [
                "19h1-pro",
                "19h2-pro",
                "rs4-pro",
                "rs5-pro"
            ],
            "metadata": {
                "description": "The Windows version for the Desktop VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "windowsServerSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsServerVersion": {
            "type": "string",
            "defaultValue": "latest",
            "allowedValues": [
                "17763.1217.2005081535",
                "17763.1282.2006061952",
                "17763.1339.2007101755",
                "17763.1397.2008070242",
                "17763.1457.2009030514",
                "latest"
            ]
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace ID"
            }
        },
        "workspaceKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace keys"
            }
        },
        "btvirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "btvnet-win"
        },
        "btvirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "rtvirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "rtvnet-win"
        },  
        "rtvirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.169.0.0/16"
        },      
        "btsubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.168.2.0/24"
        },
        "btsubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "btsnet-win"
        },
        "rtsubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.169.2.0/24"
        },
        "rtsubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "rtsnet-win"
        },
        "enableSysmon": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to install Sysmon on the endpoint?"
            }
        },
        "enableMonitoringAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to enable the Microsoft Log Analytics Monitoring agent? "
            }
        },
        "enableAADConnect": {
            "type": "bool",
            "metadata": {
                "description": "Do you want to want download the AADConnect installer and get it ready to set up after the deployment?"
            },
            "defaultValue": false
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/gastori/crib/main/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "pfxCertName": {
            "type": "string",
            "defaultValue": "ADFS.pfx",
            "metadata": {
                "description": "Name of the SSL certificate .pfx file to set an ADFS farm with. Example: ADFS.pfx"
            }
        },
        "pfxCertPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword01",
            "metadata": {
                "description": "Password to export and import PFX certificate. If it is a trusted CA signed certificate, the password will be used to import the certificate."
            }
        },
        "certificateType": {
            "type": "string",
            "defaultValue": "SelfSigned",
            "allowedValues": [
                "TrustedSigned",
                "SelfSigned"
            ],
            "metadata": {
                "description": "Are we going to set up ADFS with a trusted CA signed SSL certificate or a self-signed SSL certificate. If trusted, make sure you set the certificate container location and SAS token parameters "
            }
        },
        "_pfxCertBlobSasUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Blob SAS Url to access a trusted CA signed SSL certificate hosted in an Azure account storage private container. .PFX File. Example: https://STORAGE-ACCOUNT-NAME.blob.core.windows.net/CONTAINER-NAME/PFX-CERTIFICATE.PFX?SAS-TOKEN"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        
        // Virtual Network Setup
        "btvirtualNetworkName": "[parameters('btvirtualNetworkName')]",
        "btvirtualNetworkAddressRange": "[parameters('btvirtualNetworkAddressRange')]",
        "rtvirtualNetworkName": "[parameters('rtvirtualNetworkName')]",
        "rtvirtualNetworkAddressRange": "[parameters('rtvirtualNetworkAddressRange')]",
        "btsubnetName": "[parameters('btsubnetName')]",
        "btsubnetRange": "[parameters('btsubnetRange')]",
        "rtsubnetName": "[parameters('rtsubnetName')]",
        "rtsubnetRange": "[parameters('rtsubnetRange')]",
        "btvmPrivateIPPrefixArray": "[take(split(variables('btsubnetRange'),'.'),3)]",
        "btvmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('btvmPrivateIPPrefixArray')[0], variables('btvmPrivateIPPrefixArray')[1], variables('btvmPrivateIPPrefixArray')[2])]",
        "rtvmPrivateIPPrefixArray": "[take(split(variables('rtsubnetRange'),'.'),3)]",
        "rtvmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('rtvmPrivateIPPrefixArray')[0], variables('rtvmPrivateIPPrefixArray')[1], variables('rtvmPrivateIPPrefixArray')[2])]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('btvirtualNetworkName'), variables('btsubnetName'))]",
        "nsg-default-name": "nsg-rdp-allow",
        "nsg-id": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
        },
        "networkSecurityGroup": "[if(equals(parameters('remoteAccessMode'), 'AllowPublicIP'), variables('nsg-id'), json('null'))]",
        "btsubnets": [
            {
                "name": "[variables('btsubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('btsubnetRange')]",
                    "networkSecurityGroup": "[variables('networkSecurityGroup')]"
                }
            }
        ],
        "rtsubnets": [
            {
                "name": "[variables('rtsubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('rtsubnetRange')]",
                    "networkSecurityGroup": "[variables('networkSecurityGroup')]"
                }
            }
        ],
        //Bastion Host Network
        "bastionSubnetName": "AzureBastionSubnet",
        "nsg-bastion-host-name": "nsg-bastion-host",
        "btazureBastionSubnet": [
            {
                "name": "[variables('bastionSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('btazureBastionSubnetRange')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
                    }
                }
            }
        ],
        "rtazureBastionSubnet": [
            {
                "name": "[variables('bastionSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('rtazureBastionSubnetRange')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
                    }
                }
            }
        ],
        "btallSubnets": "[if(equals(parameters('remoteAccessMode'),'AzureBastionHost'), concat(variables('btsubnets'), variables('btazureBastionSubnet')), variables('btsubnets'))]",
        "rtallSubnets": "[if(equals(parameters('remoteAccessMode'),'AzureBastionHost'), concat(variables('rtsubnets'), variables('rtazureBastionSubnet')), variables('rtsubnets'))]",

        // Nested Templates
        "updateDNSServerScript": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-dns-server.json', parameters('_artifactsLocationSasToken')))]",
        "sysmonInstallTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sysmonInstall.json', parameters('_artifactsLocationSasToken')))]",
        "createADTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/createADForest.json', parameters('_artifactsLocationSasToken')))]",
        "joinDomainTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/joinDomain.json', parameters('_artifactsLocationSasToken')))]",
        "installADFSTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installADFS.json', parameters('_artifactsLocationSasToken')))]",
        "importPfxCertTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/importPfxCert.json', parameters('_artifactsLocationSasToken')))]",
        "installAADConnectTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installAADConnect.json', parameters('_artifactsLocationSasToken')))]",
        
        // Custom Scripts
        "initialSettingsScript": "[uri(parameters('_artifactsLocation'), concat('scripts/azure/Set-Initial-Settings.ps1', parameters('_artifactsLocationSasToken')))]",
        "prepareBoxScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/mis/prepare-box.ps1', parameters('_artifactsLocationSasToken')))]",
        "setSecurityAuditingScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Enable-WinAuditCategories.ps1', parameters('_artifactsLocationSasToken')))]",
        "setPowerShellLogging": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Enable-PowerShell-Logging.ps1', parameters('_artifactsLocationSasToken')))]",
        "saclModule": "https://raw.githubusercontent.com/OTRF/Set-AuditRule/master/Set-AuditRule.ps1",
        "setSACLScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Set-SACLs.ps1', parameters('_artifactsLocationSasToken')))]",
        "setWallPaperScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/mis/Set-WallPaper.ps1', parameters('_artifactsLocationSasToken')))]",
        
        // Powershell DSC Scripts
        "dscModules": "[uri(parameters('_artifactsLocation'), concat('scripts/azure/Install-DSC-Modules.ps1', parameters('_artifactsLocationSasToken')))]",
        "createADForestScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Create-AD-ADFS.zip', parameters('_artifactsLocationSasToken')))]",
        "joinDomainScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Join-Domain.zip', parameters('_artifactsLocationSasToken')))]",
        "importPfxCertScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/mis/Import-PfxCert.zip', parameters('_artifactsLocationSasToken')))]",
        "installADFSScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Install-ADFS.zip', parameters('_artifactsLocationSasToken')))]",
        "installSysmonScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/software/Install-Sysmon.zip', parameters('_artifactsLocationSasToken')))]",
        "installAADConnectScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/mis/Install-AADConnect.zip', parameters('_artifactsLocationSasToken')))]",

        // Virtual Machine Properties
        "copy": [
            {
                "name": "allWinWKS",
                "count": "[parameters('numberOfWorkstations')]",
                "input": {
                    "tag": "workstation",
                    "vmName": "[concat(parameters('vmNamePrefix'),copyIndex('allWinWKS',6))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allWinWKS',6))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "MicrosoftWindowsDesktop",
                    "offer": "Windows-10",
                    "sku": "[parameters('windowsDesktopSKU')]",
                    "version": "[parameters('windowsDesktopVersion')]",
                    "extensionName": "SetupWinVM"
                }
            }
        ],
        "domainController": [
            {
                "tag": "domainController",
                "vmName": "DC01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),'4')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpDC"
            }
        ],
        "adfsServer": [
            {
                "tag": "adfs",
                "vmName": "ADFS01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),'5')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpADFS"
            }
        ],

        // Additional Variables
        "allServers": "[concat(variables('domainController'), variables('adfsServer'))]",
        "allEndpoints": "[concat(variables('allWinWKS'), variables('domainController'), variables('adfsServer'))]",
        "domainNameArray": "[split(parameters('domainFQDN'),'.')]",
        "workstationsOUPath": "[concat('OU=Workstations; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",
        "serversOUPath": "[concat('OU=Servers; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",
        
        //Certificates
        "smbSharedFolder": "Setup",
        "selfsignedPfxCertPath": "[concat('\\\\',variables('domainController')[0].vmName,'\\',variables('smbSharedFolder'),'\\',parameters('pfxCertName'))]",
        "signedPfxCertPath": "[concat('C:\\ProgramData\\',parameters('pfxCertName'))]",
        "pfxCertPath": "[if(equals(parameters('certificateType'),'TrustedSigned'),variables('signedPfxCertPath'),variables('selfsignedPfxCertPath'))]",
        "pfxCertUri": "[array(parameters('_pfxCertBlobSasUrl'))]",

        //ADFS Service
        "adfsSiteName": "ADFS",
        "federationServiceName": "[concat(variables('adfsSiteName'),'.',parameters('domainFQDN'))]",

        // Initial Setup Scripts
        "initialSetUpScripts": [
            "[variables('initialSettingsScript')]",
            "[variables('dscModules')]",
            "[variables('prepareBoxScript')]",
            "[variables('setSecurityAuditingScript')]",
            "[variables('setPowerShellLogging')]",
            "[variables('saclModule')]",
            "[variables('setSACLScript')]",
            "[variables('setWallPaperScript')]"
        ],
        "initialDCADFSScripts": "[if(equals(parameters('certificateType'),'TrustedSigned'), concat(variables('initialSetUpScripts'), variables('pfxCertUri')), variables('initialSetUpScripts'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            //This NSG is created only when Remote Access Mode is selected. Needs a Public IP only
            "condition": "[equals(parameters('remoteAccessMode'), 'AllowPublicIP')]", 
            "comments": "Default Network Security Group for Windows endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('nsg-default-name')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-3389",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            //This NSG is created when Az Bastion is selected as a remote connectivity option only
            "condition": "[equals(parameters('remoteAccessMode'), 'AzureBastionHost')]", 
            "comments": "Default Network Security Group for Azure Bastion Host",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('nsg-bastion-host-name')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHTTPsInbound",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "AllowGatewayManagerInbound",
                        "properties": {
                            "priority": 110,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "AllowSshRdpOutbound",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Outbound",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork"
                        }
                    },
                    {
                        "name": "AllowAzureCloudOutbound",
                        "properties": {
                            "priority": 110,
                            "access": "Allow",
                            "direction": "Outbound",
                            "destinationPortRange": "443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud"
                        }
                    }
                ]
            }
        },
        {
            //Blue Team VNET
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-02-01",
            "name": "[variables('btvirtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('btvirtualNetworkAddressRange')]"
                    ]
                },
                "subnets": "[variables('btallSubnets')]"
            }
        },
        {
            //Read Team VNET
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-02-01",
            "name": "[variables('rtvirtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('rtvirtualNetworkAddressRange')]"
                    ]
                },
                "subnets": "[variables('rtallSubnets')]"
            }
        },
        {
            //Blue Team PIP for Az Bastion
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('btpip-', parameters('btazureBastionHostName'))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            //Read Team PIP for Az Bastion
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('rtpip-', parameters('rtazureBastionHostName'))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            //Blue Team Az Bastion
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-05-01",
            "name": "[concat('bt', parameters('btazureBastionHostName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('btpip-', parameters('btazureBastionHostName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('btvirtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('btpip-', parameters('btazureBastionHostName')))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('btvirtualNetworkName'), variables('bastionSubnetName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            //Read Team Az Bastion
            "condition": "[equals(parameters('remoteAccessMode'),'AzureBastionHost')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2020-05-01",
            "name": "[concat('rt', parameters('rtazureBastionHostName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('rtpip-', parameters('rtazureBastionHostName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('rtvirtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('rtpip-', parameters('rtazureBastionHostName')))]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('rtvirtualNetworkName'), variables('bastionSubnetName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            //Blue Team PIP for Traditional public faced RDP
            "condition": "[equals(parameters('remoteAccessMode'),'AllowPublicIP')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('pip-', variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName)]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "vmPublicIpCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(concat(variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName, '-', uniquestring(resourceGroup().id, parameters('utcValue'))))]"
                }
            }
        },
        {
            //Blue Team Netw Interface
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-11-01",
            "name": "[concat('nic-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('btvirtualNetworkName'))]"
            ],
            "copy": {
                "name": "vmNetworkInterfaceCopy",
                "count": "[length(variables('allEndpoints'))]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].ipAddress]",
                            "publicIPAddress": "[if(equals(parameters('remoteAccessMode'),'AllowPublicIP'), json(concat('{\"id\":', '\"', resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)),'\"}')),json('null'))]",
                            "subnet": {
                                "id": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].subnetref]"
                            }
                        }
                    }
                ]
            }
        }
    ],
    "outputs": {
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('btvirtualNetworkName')]"
        },
        "virtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('btvirtualNetworkName'))]"
        },
        "allWinVMsDeployed": {
            "type": "array",
            "value": "[variables('allEndpoints')]"
        },
        "allWinServersDeployed": {
            "type": "array",
            "value": "[variables('allServers')]"
        },
        "dcWinServerDeployed": {
            "type": "array",
            "value": "[variables('domainController')]"
        }
    }
}
