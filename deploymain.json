{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            },
            "defaultValue": "[utcNow()]"
        },
        "azFirewallPublicIPName": {
            "type": "string",
            "defaultValue": "crAzFWPiP",
            "metadata": {
                "description": "Namefor the Azure Firewall Public IP."
            }
        },
        "azFirewallPolicyName": {
            "type": "string",
            "defaultValue": "crAzFWPolicy",
            "metadata": {
                "description": "Name for the Azure Firewall Policy."
            }
        },
        "azFirewallName": {
            "type": "string",
            "defaultValue": "crAzFirewall",
            "metadata": {
                "description": "Name for the Azure Firewall ."
            }
        },
        "azAppGatewayName": {
            "type": "string",
            "defaultValue": "crAzAppGtw",
            "metadata": {
                "description": "Name for the Azure Gateway ."
            }
        },
        "azAppGatewayPublicIPName": {
            "type": "string",
            "defaultValue": "crAzAppGtwPiP",
            "metadata": {
                "description": "Namefor the Azure App Gateway Public IP."
            }
        },
        "azAppGatewayPolicyName": {
            "type": "string",
            "defaultValue": "crAzAppGtwPolicy",
            "metadata": {
                "description": "Namefor the Azure App Gateway Policy Name."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "gastori",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword0123", // clean password from code
            "minLength": 12,
            "metadata": {
                "description": "Password for the all Virtual machines, also used as SSH Key if option is selected. The password must be at least 12 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "linuxAuthenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Linux Virtual Machine. SSH key is recommended."
            }
        },
        //"linuxAdminPasswordOrKey": {
        //    "type": "securestring",
        //    "metadata": {
        //       "description": "SSH Key or password for the Virtual Machine. SSH key is recommended. The password must be at least 8 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter."
        //    }
        //},
        "adfsUsername": {
            "type": "string",
            "defaultValue": "gastori",
            "metadata": {
                "description": "ADFS user account name"
            }
        },
        "adfsPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword0123", // clean password from code
            "minLength": 12,
            "metadata": {
                "description": "Password for ADFS user account. The password must be at least 12 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
            }
        },
        "domainUsers": {
            "type": "secureObject",
            "metadata": {
                "description": "Domain users to create after domain is set up."
            },
            "defaultValue": { //remove clear txt passwords and replace with a secure string parameter
                "array": [
                    {"FirstName":"Norah","LastName":"Martha","SamAccountName":"nmartha","Department":"Human Resources","JobTitle":"HR Director","Password":"S@l@m3!123","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Pedro","LastName":"Gustavo","SamAccountName":"pgustavo","Department":"IT Support","JobTitle":"CIO","Password":"W1n1!2019","Identity":"Domain Admins","UserContainer":"DomainUsers"},
                    {"FirstName":"Lucho","LastName":"Rodriguez","SamAccountName":"lrodriguez","Department":"Accounting","JobTitle":"VP","Password":"T0d@y!2019","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Stevie","LastName":"Beavers","SamAccountName":"sbeavers","Department":"Sales","JobTitle":"Agent","Password":"B1gM@c!2020","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Sysmon","LastName":"MS","SamAccountName":"sysmonsvc","Department":"IT Support","JobTitle":"Service Account","Password":"Buggy!1122","Identity":"Users","UserContainer":"DomainUsers"},
                    {"FirstName":"Nxlog","LastName":"Shipper","SamAccountName":"nxlogsvc","Department":"IT Support","JobTitle":"Service Account","Password":"S3nData!1122","Identity":"Users","UserContainer":"DomainUsers"}
                ]
            }
        },
        "remoteAccessMode": {
            "type": "string",
            "metadata": {
                "description": "Do you want to restrict access to your environment by a Public IP or set up an Azure Bastion Host. If the former, make sure you add your public IP address to the variable 'allowedIPAddresses'"
            },
            "defaultValue": "AllowPublicIP",
            "allowedValues": [
                "AllowPublicIP",
                "AzureBastionHost"
            ]
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "azureBastionHostName": {
            "type": "string",
            "metadata": {
                "description": "Name of Azure Bastion Host assigned to the Virtual network in this template"
            },
            "defaultValue": "AzureBastionHost"
        },
        "btazureBastionSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the Azure Bastion service"
            },
            "defaultValue": "192.168.3.0/27"
        },
        "rtazureBastionSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the Azure Bastion service"
            },
            "defaultValue": "192.169.3.0/27"
        },
        "domainFQDN": {
            "type": "string",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            },
            "defaultValue": "gastoricyber.local"
        },
        "numberOfWorkstations": {
            "type": "int",
            "minValue": 1,
            "maxValue": 5,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5
            ],
            "metadata": {
                "description": "Number of VMs to deploy - min 1, max 5"
            },
            "defaultValue": 1
        },
        "numberOfWinServers": {
            "type": "int",
            "minValue": 1,
            "maxValue": 3,
            "allowedValues": [
                1,
                2,
                3
            ],
            "metadata": {
                "description": "Number of VMs to deploy - min 1, max 3"
            },
            "defaultValue": 1
        },
        "numberOfUbuntuServers": {
            "type": "int",
            "minValue": 0,
            "maxValue": 2,
            "allowedValues": [
                0,
                1,
                2
            ],
            "metadata": {
                "description": "Number of VMs to deploy - min 0, max 2"
            },
            "defaultValue": 1
        },
        "numberOfCentOSServers": {
            "type": "int",
            "minValue": 0,
            "maxValue": 2,
            "allowedValues": [
                0,
                1,
                2
            ],
            "metadata": {
                "description": "Number of VMs to deploy - min 0, max 2"
            },
            "defaultValue": 1
        },
        "numberOfRedHatServers": {
            "type": "int",
            "minValue": 0,
            "maxValue": 2,
            "allowedValues": [
                0,
                1,
                2
            ],
            "metadata": {
                "description": "Number of VMs to deploy - min 0, max 2"
            },
            "defaultValue": 1
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the name of your virtual machine. Template will add a number starting from 5."
            },
            "defaultValue": "cribvm"
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h2-pro",
            "allowedValues": [
                "19h1-pro",
                "19h2-pro",
                "rs4-pro",
                "rs5-pro"
            ],
            "metadata": {
                "description": "The Windows version for the Desktop VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "windowsServerSKU": {
            "type": "string",
            "defaultValue": "2019-Datacenter",
            "allowedValues": [
                "2019-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsServerVersion": {
            "type": "string",
            "defaultValue": "latest",
            "allowedValues": [
                "17763.1217.2005081535",
                "17763.1282.2006061952",
                "17763.1339.2007101755",
                "17763.1397.2008070242",
                "17763.1457.2009030514",
                "latest"
            ]
        },
        "ubuntuServerSku":{
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "18.04-LTS",
                "20.04-LTS"
            ],
            "metadata": {
                "description": "The Ubuntu version for the Server VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "ubuntuServerVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "centOSServerSku":{
            "type": "string",
            "defaultValue": "7.7",
            "allowedValues": [
                "7.6",
                "7.7"
            ],
            "metadata": {
                "description": "The CentOS version for the Server VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "centOSServerVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "redHatServerSku":{
            "type": "string",
            "defaultValue": "8.2",
            "allowedValues": [
                "8.1",
                "8.2"
            ],
            "metadata": {
                "description": "The Red Hat version for the Server VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "redHatServerVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "workspaceName": {
            "type": "string",
            "defaultValue": "CRiBSentinel",
            "metadata": {
                "description": "Name for the Log Analytics workspace used to aggregate data. If this is a new LA workspace, the template will add a unique string to the name you choose. If you are using an existing LA workspace, the name will not change and will be passed as is to the resources in the template."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace ID. Leave it empty if you are deploying a new LA workspace."
            }
        },
        "workspaceKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace keys. Leave it empty if you are deploying a new LA workspace."
            }
        },
        "pricingTier": {
            "type": "string",
            "allowedValues": [
                "PerGB2018",
                "Free",
                "Standalone",
                "PerNode",
                "Standard",
                "Premium"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Pricing tier: pergb2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
            }
        },
        "dataRetention": {
            "type": "int",
            "defaultValue": 90,
            "minValue": 7,
            "maxValue": 730,
            "metadata": {
                "description": "Number of days of retention. Workspaces in the legacy Free pricing tier can only have 7 days."
            }
        },
        "immediatePurgeDataOn30Days": { // remove this .. not needed
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "If set to true when changing retention to 30 days, older data will be immediately deleted. Use this with extreme caution. This only applies when retention is being set to 30 days."
            }
        },
        "securityCollectionTier": {
            "type": "string",
            "metadata": {
                "description": "Tier for gathering Windows Security Events."
            },
            "allowedValues": [
                "All",
                "Recommended",
                "Minimal",
                "None"
            ],
            "defaultValue": "All"
        },
        "btVirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "btvnet-win"
        },
        "btVirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "rtVirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "rtvnet-win"
        },  
        "rtVirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.169.0.0/16"
        },    
        "hbVirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "hbvnet"
        },  
        "hbVirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.170.0.0/24"
        },  
        "btSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.168.2.0/24"
        },
        "btSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "btsnet"
        },
        "rtSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.169.2.0/24"
        },
        "rtSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "rtsnet"
        },
        "hbAzFwSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.170.0.0/26"
        },
        "hbAzFwSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "AzureFirewallSubnet",
            "allowedValues": ["AzureFirewallSubnet"]
        },
        "hbAgtwSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.170.0.64/26"
        },
        "hbAgtwSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "AzureAppGTWlSubnet"
        },
        "enableSysmon": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to install Sysmon on the endpoint?"
            }
        },
        "enableMonitoringAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to enable the Microsoft Log Analytics Monitoring agent? "
            }
        },
        "enableAADConnect": {
            "type": "bool",
            "metadata": {
                "description": "Do you want to want download the AADConnect installer and get it ready to set up after the deployment?"
            },
            "defaultValue": false
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/gastori/crib/main/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "pfxCertName": {
            "type": "string",
            "defaultValue": "ADFS.pfx",
            "metadata": {
                "description": "Name of the SSL certificate .pfx file to set an ADFS farm with. Example: ADFS.pfx"
            }
        },
        "pfxCertPassword": {
            "type": "securestring",
            "defaultValue": "P@ssword01",
            "metadata": {
                "description": "Password to export and import PFX certificate. If it is a trusted CA signed certificate, the password will be used to import the certificate."
            }
        },
        "certificateType": {
            "type": "string",
            "defaultValue": "SelfSigned",
            "allowedValues": [
                "TrustedSigned",
                "SelfSigned"
            ],
            "metadata": {
                "description": "Are we going to set up ADFS with a trusted CA signed SSL certificate or a self-signed SSL certificate. If trusted, make sure you set the certificate container location and SAS token parameters "
            }
        },
        "_pfxCertBlobSasUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Blob SAS Url to access a trusted CA signed SSL certificate hosted in an Azure account storage private container. .PFX File. Example: https://STORAGE-ACCOUNT-NAME.blob.core.windows.net/CONTAINER-NAME/PFX-CERTIFICATE.PFX?SAS-TOKEN"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        
        // Virtual Network Setup
        "btvirtualNetworkName": "[parameters('btvirtualNetworkName')]",
        "btvirtualNetworkAddressRange": "[parameters('btvirtualNetworkAddressRange')]",
        "rtvirtualNetworkName": "[parameters('rtvirtualNetworkName')]",
        "rtvirtualNetworkAddressRange": "[parameters('rtvirtualNetworkAddressRange')]",
        "hbvirtualNetworkName": "[parameters('hbvirtualNetworkName')]",
        "hbvirtualNetworkAddressRange": "[parameters('hbvirtualNetworkAddressRange')]",
        "btsubnetName": "[parameters('btsubnetName')]",
        "btsubnetRange": "[parameters('btsubnetRange')]",
        "rtsubnetName": "[parameters('rtsubnetName')]",
        "rtsubnetRange": "[parameters('rtsubnetRange')]",
        "hbAzFwSubnetName": "[parameters('hbAzFwSubnetName')]",
        "hbFwSubnetRange": "[parameters('hbAzFwSubnetRange')]",
        "hbAGTWsubnetName": "[parameters('hbAGTWsubnetName')]",
        "hbAGTWsubnetRange": "[parameters('hbAGTWsubnetRange')]",
        "btvmPrivateIPPrefixArray": "[take(split(variables('btsubnetRange'),'.'),3)]",
        "btvmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('btvmPrivateIPPrefixArray')[0], variables('btvmPrivateIPPrefixArray')[1], variables('btvmPrivateIPPrefixArray')[2])]",
        "rtvmPrivateIPPrefixArray": "[take(split(variables('rtsubnetRange'),'.'),3)]",
        "rtvmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('rtvmPrivateIPPrefixArray')[0], variables('rtvmPrivateIPPrefixArray')[1], variables('rtvmPrivateIPPrefixArray')[2])]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('btvirtualNetworkName'), variables('btsubnetName'))]",
        "rtsubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('rtvirtualNetworkName'), variables('rtsubnetName'))]",
        "nsg-default-name": "nsg-default",
        "nsg-id": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
        },
        "networkSecurityGroup": "[if(equals(parameters('remoteAccessMode'), 'AllowPublicIP'), variables('nsg-id'), json('null'))]",
        "btsubnets": [
            {
                "name": "[variables('btsubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('btsubnetRange')]",
                    "networkSecurityGroup": "[variables('networkSecurityGroup')]",
                    "routeTable": {
                    "id": "[resourceId('Microsoft.Network/routeTables', variables('udrBlue2Red'))]"
                    }
                }
            }
        ],
        "rtsubnets": [
            {
                "name": "[variables('rtsubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('rtsubnetRange')]",
                    "networkSecurityGroup": "[variables('networkSecurityGroup')]",
                    "routeTable": {
                    "id": "[resourceId('Microsoft.Network/routeTables', variables('udrRed2Blue'))]"
                    }
                }
            }
        ],
        "hbsubnets": [
            {
                "name": "[variables('hbAzFwSubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('hbFwSubnetRange')]"
                }
            },
            {
                "name": "[variables('hbAGTWsubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('hbAGTWsubnetRange')]"
                }
            }
        ],
        //Bastion Host Network
        "bastionSubnetName": "AzureBastionSubnet",
        "nsg-bastion-host-name": "nsg-bastion-host",
        "btazureBastionSubnet": [
            {
                "name": "[variables('bastionSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('btazureBastionSubnetRange')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
                    }
                }
            }
        ],
        "rtazureBastionSubnet": [
            {
                "name": "[variables('bastionSubnetName')]",
                "properties": {
                    "addressPrefix": "[parameters('rtazureBastionSubnetRange')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-bastion-host-name'))]"
                    }
                }
            }
        ],
        "btallSubnets": "[if(equals(parameters('remoteAccessMode'),'AzureBastionHost'), concat(variables('btsubnets'), variables('btazureBastionSubnet')), variables('btsubnets'))]",
        "rtallSubnets": "[if(equals(parameters('remoteAccessMode'),'AzureBastionHost'), concat(variables('rtsubnets'), variables('rtazureBastionSubnet')), variables('rtsubnets'))]",
        "hballSubnets": "[variables('hbsubnets')]",

        // Nested Templates
        "updateDNSServerScript": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/misc/vnet-dns-server.json', parameters('_artifactsLocationSasToken')))]",
        "sysmonInstallTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/misc/sysmonInstall.json', parameters('_artifactsLocationSasToken')))]",
        "createADTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/mainenvconfiguration/createADForest.json', parameters('_artifactsLocationSasToken')))]",
        "joinDomainTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/mainenvconfiguration/joinDomain.json', parameters('_artifactsLocationSasToken')))]",
        "installADFSTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/mainenvconfiguration/installADFS.json', parameters('_artifactsLocationSasToken')))]",
        "importPfxCertTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/mainenvconfiguration/importPfxCert.json', parameters('_artifactsLocationSasToken')))]",
        "installAADConnectTemplateUri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/mainenvconfiguration/installAADConnect.json', parameters('_artifactsLocationSasToken')))]",
        "deploySentinel": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sentinel/sentineldeploy.json', parameters('_artifactsLocationSasToken')))]",
        "windatasources": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sentinel/log-analytics/winDataSources.json', parameters('_artifactsLocationSasToken')))]",
        "allconnectors": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sentinel/data-connectors/allConnectors.json', parameters('_artifactsLocationSasToken')))]",
        "scheduledAlerts": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sentinel/alerts/scheduledAlerts.json', parameters('_artifactsLocationSasToken')))]",
        "IdentityWorkbookARM": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/sentinel/workbooks/IdentityWorkbookARM.json', parameters('_artifactsLocationSasToken')))]",

        "deployC2Uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/deployC2.json', parameters('_artifactsLocationSasToken')))]",
        
        // Custom Scripts
        "initialSettingsScript": "[uri(parameters('_artifactsLocation'), concat('scripts/azure/Set-Initial-Settings.ps1', parameters('_artifactsLocationSasToken')))]",
        "prepareBoxScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/mis/prepare-box.ps1', parameters('_artifactsLocationSasToken')))]",
        "setSecurityAuditingScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Enable-WinAuditCategories.ps1', parameters('_artifactsLocationSasToken')))]",
        "setPowerShellLogging": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Enable-PowerShell-Logging.ps1', parameters('_artifactsLocationSasToken')))]",
        "saclModule": "https://raw.githubusercontent.com/OTRF/Set-AuditRule/master/Set-AuditRule.ps1",
        "setSACLScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/auditing/Set-SACLs.ps1', parameters('_artifactsLocationSasToken')))]",
        "setWallPaperScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/mis/Set-WallPaper.ps1', parameters('_artifactsLocationSasToken')))]",
        "c2SetupScript": "[uri(parameters('_artifactsLocation'), concat('scripts/bash/Install-C2s.sh', parameters('_artifactsLocationSasToken')))]",
        "dockerSetupScript": "[uri(parameters('_artifactsLocation'), concat('scripts/bash/Install-Docker.sh', parameters('_artifactsLocationSasToken')))]",
        
        // Powershell DSC Scripts
        "dscModules": "[uri(parameters('_artifactsLocation'), concat('scripts/azure/Install-DSC-Modules.ps1', parameters('_artifactsLocationSasToken')))]",
        "createADForestScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Create-AD-ADFS.zip', parameters('_artifactsLocationSasToken')))]",
        "joinDomainScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Join-Domain.zip', parameters('_artifactsLocationSasToken')))]",
        "importPfxCertScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/mis/Import-PfxCert.zip', parameters('_artifactsLocationSasToken')))]",
        "installADFSScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/active-directory/Install-ADFS.zip', parameters('_artifactsLocationSasToken')))]",
        "installSysmonScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/software/Install-Sysmon.zip', parameters('_artifactsLocationSasToken')))]",
        "installAADConnectScript": "[uri(parameters('_artifactsLocation'), concat('scripts/powershell/dsc/mis/Install-AADConnect.zip', parameters('_artifactsLocationSasToken')))]",

        // Blue Team Virtual Machine Properties
        "copy": [
            {
                "name": "allWinWKS",
                "count": "[parameters('numberOfWorkstations')]",
                "input": {
                    "tag": "workstation",
                    "vmName": "[concat(parameters('vmNamePrefix'),'winwks',copyIndex('allWinWKS',6))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allWinWKS',6))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "MicrosoftWindowsDesktop",
                    "offer": "Windows-10",
                    "sku": "[parameters('windowsDesktopSKU')]",
                    "version": "[parameters('windowsDesktopVersion')]",
                    "extensionName": "SetupWinVM"
                }
            },
            {
                "name": "allWinServers",
                "count": "[parameters('numberOfWinServers')]",
                "input": {
                    "tag": "winServer",
                    "vmName": "[concat(parameters('vmNamePrefix'),'winsrv',copyIndex('allWinServers',11))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allWinServers',11))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('windowsServerSKU')]",
                    "version": "[parameters('windowsServerVersion')]",
                    "extensionName": "SetupWinVM"
                }
            },
            {
                "name": "allUbuntuServers",
                "count": "[parameters('numberOfUbuntuServers')]",
                "input": {
                    "tag": "ubuntuServer",
                    "vmName": "[concat(parameters('vmNamePrefix'),'ubuntusrv',copyIndex('allUbuntuServers',14))]",
                    "os": "linux",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allUbuntuServers',14))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "Canonical",
                    "offer": "UbuntuServer",
                    "sku": "[parameters('ubuntuServerSku')]",
                    "version": "[parameters('ubuntuServerVersion')]"
                    //"extensionName": "SetupWinVM"
                }
            },
            {
                "name": "allCentOSServers",
                "count": "[parameters('numberOfCentOSServers')]",
                "input": {
                    "tag": "centOSServer",
                    "vmName": "[concat(parameters('vmNamePrefix'),'centossrv',copyIndex('allCentOSServers',16))]",
                    "os": "linux",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allCentOSServers',16))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "OpenLogic",
                    "offer": "Centos",
                    "sku": "[parameters('centOSServerSku')]",
                    "version": "[parameters('centOSServerVersion')]"
                    //"extensionName": "SetupWinVM"
                }
            },
            {
                "name": "allRedHatServers",
                "count": "[parameters('numberOfRedHatServers')]",
                "input": {
                    "tag": "redHatServer",
                    "vmName": "[concat(parameters('vmNamePrefix'),'redhatsrv',copyIndex('allRedHatServers',18))]",
                    "os": "linux",
                    "subnetref": "[variables('subnetRef')]",
                    "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),copyIndex('allRedHatServers',18))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "RedHat",
                    "offer": "RHEL",
                    "sku": "[parameters('redHatServerSku')]",
                    "version": "[parameters('redHatServerVersion')]"
                    //"extensionName": "SetupWinVM"
                }
            }
        ],
        // Red Team Virtual Machines Properties
        "kaliLinux": [
            {
                "tag": "kaliLinux",
                "vmName": "crKali",
                "os": "Linux",
                "subnetref": "[variables('rtsubnetRef')]",
                "ipAddress": "[concat(variables('rtvmPrivateIPAddresPrefix'),'4')]", //change to 4 - it was 14
                "vmSize": "[parameters('vmSize')]",
                "publisher": "kali-linux",
                "product": "kali-linux",
                "name": "kali",
                "offer": "kali-linux",
                "sku": "kali",
                "version": "2019.2.0"
            }
        ],
        "infectionMonkey": [
            {
                "tag": "infectionMonkey",
                "vmName": "crInfMonkey",
                "os": "Linux",
                "subnetref": "[variables('rtsubnetRef')]",
                "ipAddress": "[concat(variables('rtvmPrivateIPAddresPrefix'),'5')]", //change to 5 - it was 15
                "vmSize": "[parameters('vmSize')]",
                "publisher": "guardicore",
                "product": "infection_monkey",
                "name": "infection_monkey",
                "offer": "infection_monkey",
                "sku": "infection_monkey",
                "version": "latest"
            }
        ],
        "c2Server": [
            {
                "tag": "c2Server",
                "vmName": "c2Server",
                "os": "Linux",
                "subnetref": "[variables('rtsubnetRef')]",
                "ipAddress": "[concat(variables('rtvmPrivateIPAddresPrefix'),'6')]", //change to 6 - it was 16
                "vmSize": "[parameters('vmSize')]",
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "18.04-LTS",
                "version": "latest"
            }
        ],
        "domainController": [
            {
                "tag": "domainController",
                "vmName": "DC01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),'4')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpDC"
            }
        ],
        "adfsServer": [
            {
                "tag": "adfs",
                "vmName": "ADFS01",
                "os": "windows",
                "subnetref": "[variables('subnetRef')]",
                "ipAddress": "[concat(variables('btvmPrivateIPAddresPrefix'),'5')]",
                "vmSize": "[parameters('vmSize')]",
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "[parameters('windowsServerSKU')]",
                "version": "[parameters('windowsServerVersion')]",
                "extensionName": "SetUpADFS"
            }
        ],
        
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPassword')]"
                    }
                ]
            }
        },

        //Firewall, App Gateway Variables
        "azFirewallName": "[parameters('azFirewallName')]",
        "azFirewallPublicIPName": "[parameters('azFirewallPublicIPName')]",
        "azFirewallPolicyName": "[parameters('azFirewallPolicyName')]",
        "azAppGatewayName": "[parameters('azAppGatewayName')]",
        "azAppGatewayPublicIPName": "[parameters('azAppGatewayPublicIPName')]",
        "azAppGatewayPolicyName": "[parameters('azAppGatewayPolicyName')]",
        "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('azAppGatewayName'))]",

        //Web App JuiceShop
        "webappName": "crJuiceShop",
        "webappServicePlanName": "crjuiceShopwebplan",

        // Additional Variables
        "linuxAuthenticationType": "[parameters('linuxAuthenticationType')]",
        "allServers": "[concat(variables('allWinServers'),variables('domainController'), variables('adfsServer'))]",
        "allBlueTeamWinEndpoints": "[concat(variables('allWinWKS'), variables('allWinServers'),variables('domainController'), variables('adfsServer'))]",
        "allBlueTeamEnpoints": "[concat(variables('allWinWKS'), variables('allWinServers'),variables('domainController'), variables('adfsServer'), variables('allUbuntuServers'),variables('allCentOSServers'),variables('allRedHatServers'))]",
        "allRedTeamEndpoints": "[concat(variables('kaliLinux'), variables('infectionMonkey'), variables('c2Server'))]",
        "redTeamKaliAndInfectionMonkey": "[concat(variables('kaliLinux'), variables('infectionMonkey'))]",
        "redTeamLinuxAndWindows": "[concat(variables('c2Server'))]",
        "domainNameArray": "[split(parameters('domainFQDN'),'.')]",
        "workstationsOUPath": "[concat('OU=Workstations; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",
        "serversOUPath": "[concat('OU=Servers; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",
        "seperatedAPGSubnetAddressPrefix_p1": "[split(variables('hbAGTWsubnetRange'),'.')]",
        "seperatedAPGSubnetAddressPrefix_p2": "[split(variables('seperatedAPGSubnetAddressPrefix_p1')[3],'/')]",
        "AppGTWPrivIP": "[concat(variables('seperatedAPGSubnetAddressPrefix_p1')[0],'.',variables('seperatedAPGSubnetAddressPrefix_p1')[1],'.',variables('seperatedAPGSubnetAddressPrefix_p1')[2],'.',string(add(int(variables('seperatedAPGSubnetAddressPrefix_p2')[0]),5)))]",
        "seperatedFWSubnetAddressPrefix_p1": "[split(variables('hbFwSubnetRange'),'.')]",
        "seperatedFWSubnetAddressPrefix_p2": "[split(variables('seperatedFWSubnetAddressPrefix_p1')[3],'/')]",
        "AppFWPrivIP": "[concat(variables('seperatedFWSubnetAddressPrefix_p1')[0],'.',variables('seperatedFWSubnetAddressPrefix_p1')[1],'.',variables('seperatedFWSubnetAddressPrefix_p1')[2],'.',string(add(int(variables('seperatedFWSubnetAddressPrefix_p2')[0]),4)))]",

        
        "udrBlue2Red": "udrbt2rt",
        "udrRed2Blue": "udrrt2bt",

        //Sentinel
        "uniqueWorkspace": "[if(and(empty(parameters('workspaceName')),empty(parameters('workspaceId'))),concat(parameters('workspaceName'), uniquestring(resourceGroup().id, parameters('utcValue'))),parameters('workspaceName'))]",

        "logAnalyticsFunctions": [
            "Sysmon"
        ],
        "windowsEventLogs": [
            "System",
            "Application",
            "Microsoft-Windows-Sysmon/Operational",
            "Directory Service",
            "Windows PowerShell",
            "Microsoft-Windows-PowerShell/Operational",
            "AD FS/Admin"
        ],
        "dataConnectors": [
            "AzureActivityLog",
            "SecurityEvents",
            "MicrosoftThreatProtection",
            "AzureActiveDirectoryIdentityProtection",
            "Office365"
        ],
        "specificScheduledAlerts": [
            "ADFS DKM Master Key Export",
            "New access credential added to Application or Service Principal",
            "Credential added after admin consented to Application",
            "First access credential added to Application or Service Principal where no credential was present",
            "Mail.Read Permissions Granted to Application"
        ],
        "aadDiagnosticSettingName": "[concat('AADConnector-',uniqueString(subscription().subscriptionId,resourceGroup().name,parameters('utcValue')))]",
        
        //Certificates
        "smbSharedFolder": "Setup",
        "selfsignedPfxCertPath": "[concat('\\\\',variables('domainController')[0].vmName,'\\',variables('smbSharedFolder'),'\\',parameters('pfxCertName'))]",
        "signedPfxCertPath": "[concat('C:\\ProgramData\\',parameters('pfxCertName'))]",
        "pfxCertPath": "[if(equals(parameters('certificateType'),'TrustedSigned'),variables('signedPfxCertPath'),variables('selfsignedPfxCertPath'))]",
        "pfxCertUri": "[array(parameters('_pfxCertBlobSasUrl'))]",

        //ADFS Service
        "adfsSiteName": "ADFS",
        "federationServiceName": "[concat(variables('adfsSiteName'),'.',parameters('domainFQDN'))]",

        // Initial Setup Scripts
        "initialSetUpScripts": [
            "[variables('initialSettingsScript')]",
            "[variables('dscModules')]",
            "[variables('prepareBoxScript')]",
            "[variables('setSecurityAuditingScript')]",
            "[variables('setPowerShellLogging')]",
            "[variables('saclModule')]",
            "[variables('setSACLScript')]",
            "[variables('setWallPaperScript')]"
        ],
        "initialDCADFSScripts": "[if(equals(parameters('certificateType'),'TrustedSigned'), concat(variables('initialSetUpScripts'), variables('pfxCertUri')), variables('initialSetUpScripts'))]"
    },
    // Resource Deployment
    "resources": [
        {
            //----------------Deploy and Configure Sentinel---------------------------------------------
            //Log Analytics and Sentinel
            "condition": "[and(empty(parameters('workspaceId')),empty(parameters('workspaceKey')))]",
            "name": "deployAzureSentinel",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('deploySentinel')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[parameters('workspaceName')]"
                    },
                    "pricingTier": {
                        "value": "[parameters('pricingTier')]"
                    },
                    "dataRetention": {
                        "value": "[parameters('dataRetention')]"
                    },
                    "immediatePurgeDataOn30Days": {
                        "value": "[parameters('immediatePurgeDataOn30Days')]"
                    },
                    "enableLAFunctions": {
                        "value": "[variables('logAnalyticsFunctions')]"
                    }
                }
            }
        },

        {
            "name": "collectWinDataSources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]",
            "dependsOn": [
                "deployAzureSentinel"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('windatasources')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[if(empty(parameters('workspaceId')), reference('deployAzureSentinel').outputs.workspaceName.value, parameters('workspaceName'))]"
                    },
                    "winEventProviders": {
                        "value": "[variables('windowsEventLogs')]"
                    }
                }
            }
        },
        ///*
        {
            "type": "microsoft.aadiam/diagnosticSettings",
            "apiVersion": "2017-04-01",
            "name": "[variables('aadDiagnosticSettingName')]",
            "dependsOn": [
                //"[resourceId('Microsoft.OperationalInsights/workspaces/',variables('uniqueWorkspace'))]"
                "deployAzureSentinel"
            ],
            "properties": {
                "workspaceId": "[if(empty(parameters('workspaceId')), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/microsoft.operationalinsights/workspaces/', reference('deployAzureSentinel').outputs.workspaceName.value), concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/microsoft.operationalinsights/workspaces/', parameters('workspaceName')))]",//parameters('workspaceId'))]",
                "logAnalyticsDestinationType": null,
                "logs": [
                    {
                        "category": "SignInLogs",
                        "enabled": true
                    },
                    {
                        "category": "AuditLogs",
                        "enabled": true
                    },
                    {
                        "category": "NonInteractiveUserSignInLogs",
                        "enabled": true
                    },
                    {
                        "category": "ServicePrincipalSignInLogs",
                        "enabled":  true
                    },
                    {
                        "category": "ManagedIdentitySignInLogs",
                        "enabled":  true
                    },
                    {
                        "category": "ProvisioningLogs",
                        "enabled":  true
                    },
                    {
                        "category": "ADFSSignInLogs",
                        "enabled":  true
                    }
                ],
                "metrics": []
            }
        },
        //*/
        {
            "name": "enableDataConnectors",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]",
            "dependsOn": [
                //"[variables('aadDiagnosticSettingName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('allconnectors')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value":  "[if(empty(parameters('workspaceId')), reference('deployAzureSentinel').outputs.workspaceName.value, parameters('workspaceName'))]"
                    },
                    "workspaceId": {
                        "value": "[if(empty(parameters('workspaceId')), reference('deployAzureSentinel').outputs.workspaceIdOutput.value, parameters('workspaceId'))]"
                    },
                    "dataConnectors": {
                        "value": "[variables('dataConnectors')]"
                    },
                    "securityCollectionTier": {
                        "value": "[parameters('securityCollectionTier')]"
                    }
                }
            }
        },
        {
            "name": "enableScheduledAlerts",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]",
            "dependsOn": [
                "enableDataConnectors"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('scheduledAlerts')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[if(empty(parameters('workspaceId')), reference('deployAzureSentinel').outputs.workspaceName.value, parameters('workspaceName'))]"
                    },
                    "dataConnectors": {
                        "value": "[variables('dataConnectors')]"
                    },
                    "specificScheduledAlerts": {
                        "value": "[variables('specificScheduledAlerts')]"
                    }
                }
            }
        },
        {
            "name": "SentinelWorkbook",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "resourceGroup": "[resourceGroup().name]",
            "subscriptionId": "[subscription().subscriptionId]",
            "dependsOn": [
                "deployAzureSentinel"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('IdentityWorkbookARM')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[if(empty(parameters('workspaceId')), reference('deployAzureSentinel').outputs.workspaceName.value, parameters('workspaceName'))]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "btvirtualNetworkName": {
            "type": "string",
            "value": "[variables('btvirtualNetworkName')]"
        },
        "btvirtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('btvirtualNetworkName'))]"
        },
        "rtvirtualNetworkName": {
            "type": "string",
            "value": "[variables('rtvirtualNetworkName')]"
        },
        "rtvirtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('rtvirtualNetworkName'))]"
        },
        "allWinVMsDeployed": {
            "type": "array",
            "value": "[variables('allBlueTeamEnpoints')]"
        },
        "allWinServersDeployed": {
            "type": "array",
            "value": "[variables('allServers')]"
        },
        "dcWinServerDeployed": {
            "type": "array",
            "value": "[variables('domainController')]"
        }
    }
}
